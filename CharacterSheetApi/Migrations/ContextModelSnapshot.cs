// <auto-generated />
using System;
using CharacterSheetApi.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CharacterSheetApi.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArmorBodyLocations", b =>
                {
                    b.Property<int>("ArmorsId")
                        .HasColumnType("int");

                    b.Property<int>("BodyLocationsId")
                        .HasColumnType("int");

                    b.HasKey("ArmorsId", "BodyLocationsId");

                    b.HasIndex("BodyLocationsId");

                    b.ToTable("ArmorBodyLocations");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.Armor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArmorPoints")
                        .HasColumnType("int");

                    b.Property<int>("ArmorTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmorTypeId");

                    b.ToTable("Armors");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.ArmorType", b =>
                {
                    b.Property<int>("ArmorTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArmorTypeId");

                    b.ToTable("ArmorType");

                    b.HasData(
                        new
                        {
                            ArmorTypeId = 0,
                            Name = "LeahterHelmet"
                        },
                        new
                        {
                            ArmorTypeId = 1,
                            Name = "Caftan"
                        },
                        new
                        {
                            ArmorTypeId = 2,
                            Name = "LeatherJacket"
                        },
                        new
                        {
                            ArmorTypeId = 3,
                            Name = "Leggings"
                        },
                        new
                        {
                            ArmorTypeId = 4,
                            Name = "LeatherSuit"
                        },
                        new
                        {
                            ArmorTypeId = 5,
                            Name = "ChainHelmet"
                        },
                        new
                        {
                            ArmorTypeId = 6,
                            Name = "ChainCaftan"
                        },
                        new
                        {
                            ArmorTypeId = 7,
                            Name = "ChainJacket"
                        },
                        new
                        {
                            ArmorTypeId = 8,
                            Name = "ChainMail"
                        },
                        new
                        {
                            ArmorTypeId = 9,
                            Name = "ChainMailWithSleeves"
                        },
                        new
                        {
                            ArmorTypeId = 10,
                            Name = "ChainLeggings"
                        },
                        new
                        {
                            ArmorTypeId = 11,
                            Name = "ChainSuit"
                        },
                        new
                        {
                            ArmorTypeId = 12,
                            Name = "PlateHelmet"
                        },
                        new
                        {
                            ArmorTypeId = 13,
                            Name = "ShoulderPads"
                        },
                        new
                        {
                            ArmorTypeId = 14,
                            Name = "PlateLeggings"
                        },
                        new
                        {
                            ArmorTypeId = 15,
                            Name = "ChestPlate"
                        },
                        new
                        {
                            ArmorTypeId = 16,
                            Name = "PlateArmor"
                        });
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.BaseStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("A")
                        .HasColumnType("int");

                    b.Property<int>("Int")
                        .HasColumnType("int");

                    b.Property<int>("K")
                        .HasColumnType("int");

                    b.Property<int>("Mag")
                        .HasColumnType("int");

                    b.Property<int>("Odp")
                        .HasColumnType("int");

                    b.Property<int>("Ogd")
                        .HasColumnType("int");

                    b.Property<int>("PO")
                        .HasColumnType("int");

                    b.Property<int>("PP")
                        .HasColumnType("int");

                    b.Property<int>("S")
                        .HasColumnType("int");

                    b.Property<int>("SW")
                        .HasColumnType("int");

                    b.Property<int>("Sz")
                        .HasColumnType("int");

                    b.Property<int>("US")
                        .HasColumnType("int");

                    b.Property<int>("WW")
                        .HasColumnType("int");

                    b.Property<int>("Wt")
                        .HasColumnType("int");

                    b.Property<int>("Zr")
                        .HasColumnType("int");

                    b.Property<int>("Zyw")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BaseStats");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.BodyLocations", b =>
                {
                    b.Property<int>("BodyLocationsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BodyLocationsId");

                    b.ToTable("BodyLocations");

                    b.HasData(
                        new
                        {
                            BodyLocationsId = 0,
                            Name = "Head"
                        },
                        new
                        {
                            BodyLocationsId = 1,
                            Name = "LeftArm"
                        },
                        new
                        {
                            BodyLocationsId = 2,
                            Name = "RightArm"
                        },
                        new
                        {
                            BodyLocationsId = 3,
                            Name = "LeftLeg"
                        },
                        new
                        {
                            BodyLocationsId = 4,
                            Name = "RightLeg"
                        },
                        new
                        {
                            BodyLocationsId = 5,
                            Name = "Torso"
                        },
                        new
                        {
                            BodyLocationsId = 6,
                            Name = "WholeBody"
                        });
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.CharacterDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CharacteriticSigns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EyeColorId")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<int>("HairColorId")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("Siblings")
                        .HasColumnType("int");

                    b.Property<int>("StarSignId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EyeColorId");

                    b.HasIndex("GenderId");

                    b.HasIndex("HairColorId");

                    b.HasIndex("RaceId");

                    b.HasIndex("StarSignId");

                    b.ToTable("CharacterDescriptions");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.CharacterInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AbilitiesId")
                        .HasColumnType("int");

                    b.Property<int?>("ArmorId")
                        .HasColumnType("int");

                    b.Property<int?>("BaseStatsId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterDescriptionId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentClassId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentStatsId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ExpiriencePointsId")
                        .HasColumnType("int");

                    b.Property<int?>("GrowthStatsId")
                        .HasColumnType("int");

                    b.Property<int?>("LastClassId")
                        .HasColumnType("int");

                    b.Property<int?>("MonetaryWealthId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("SkillsId")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbilitiesId");

                    b.HasIndex("ArmorId");

                    b.HasIndex("BaseStatsId");

                    b.HasIndex("CharacterDescriptionId");

                    b.HasIndex("CurrentClassId");

                    b.HasIndex("CurrentStatsId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ExpiriencePointsId");

                    b.HasIndex("GrowthStatsId");

                    b.HasIndex("LastClassId");

                    b.HasIndex("MonetaryWealthId");

                    b.HasIndex("PlayerInfoId");

                    b.HasIndex("SkillsId");

                    b.HasIndex("WeaponId");

                    b.ToTable("CharacterInfos");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.CharacterSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterInfoId")
                        .HasColumnType("int");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RpgSystemId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterInfoId");

                    b.HasIndex("RpgSystemId");

                    b.HasIndex("UsersId");

                    b.ToTable("CharacterSheets");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.CurrentClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CurrentClass");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.CurrentStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("A")
                        .HasColumnType("int");

                    b.Property<int>("Int")
                        .HasColumnType("int");

                    b.Property<int>("K")
                        .HasColumnType("int");

                    b.Property<int>("Mag")
                        .HasColumnType("int");

                    b.Property<int>("Odp")
                        .HasColumnType("int");

                    b.Property<int>("Ogd")
                        .HasColumnType("int");

                    b.Property<int>("PO")
                        .HasColumnType("int");

                    b.Property<int>("PP")
                        .HasColumnType("int");

                    b.Property<int>("S")
                        .HasColumnType("int");

                    b.Property<int>("SW")
                        .HasColumnType("int");

                    b.Property<int>("Sz")
                        .HasColumnType("int");

                    b.Property<int>("US")
                        .HasColumnType("int");

                    b.Property<int>("WW")
                        .HasColumnType("int");

                    b.Property<int>("Wt")
                        .HasColumnType("int");

                    b.Property<int>("Zr")
                        .HasColumnType("int");

                    b.Property<int>("Zyw")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CurrentStats");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.ExpiriencePoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentPoints")
                        .HasColumnType("int");

                    b.Property<int>("OverallPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ExpiriencePoints");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.EyeColor", b =>
                {
                    b.Property<int>("EyeColorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EyeColorId");

                    b.ToTable("EyeColor");

                    b.HasData(
                        new
                        {
                            EyeColorId = 0,
                            Name = "Grey"
                        },
                        new
                        {
                            EyeColorId = 1,
                            Name = "DarkBlue"
                        },
                        new
                        {
                            EyeColorId = 2,
                            Name = "Blue"
                        },
                        new
                        {
                            EyeColorId = 3,
                            Name = "Green"
                        },
                        new
                        {
                            EyeColorId = 4,
                            Name = "Beer"
                        },
                        new
                        {
                            EyeColorId = 5,
                            Name = "LightBrown"
                        },
                        new
                        {
                            EyeColorId = 6,
                            Name = "Brown"
                        },
                        new
                        {
                            EyeColorId = 7,
                            Name = "DarkBrown"
                        },
                        new
                        {
                            EyeColorId = 8,
                            Name = "Purple"
                        },
                        new
                        {
                            EyeColorId = 9,
                            Name = "Black"
                        },
                        new
                        {
                            EyeColorId = 10,
                            Name = "GreyBlue"
                        },
                        new
                        {
                            EyeColorId = 11,
                            Name = "Walnut"
                        },
                        new
                        {
                            EyeColorId = 12,
                            Name = "Chestnut"
                        },
                        new
                        {
                            EyeColorId = 13,
                            Name = "Silver"
                        });
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            GenderId = 0,
                            Name = "Male"
                        },
                        new
                        {
                            GenderId = 1,
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.GrowthStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("A")
                        .HasColumnType("int");

                    b.Property<int>("Int")
                        .HasColumnType("int");

                    b.Property<int>("K")
                        .HasColumnType("int");

                    b.Property<int>("Mag")
                        .HasColumnType("int");

                    b.Property<int>("Odp")
                        .HasColumnType("int");

                    b.Property<int>("Ogd")
                        .HasColumnType("int");

                    b.Property<int>("PO")
                        .HasColumnType("int");

                    b.Property<int>("PP")
                        .HasColumnType("int");

                    b.Property<int>("S")
                        .HasColumnType("int");

                    b.Property<int>("SW")
                        .HasColumnType("int");

                    b.Property<int>("Sz")
                        .HasColumnType("int");

                    b.Property<int>("US")
                        .HasColumnType("int");

                    b.Property<int>("WW")
                        .HasColumnType("int");

                    b.Property<int>("Wt")
                        .HasColumnType("int");

                    b.Property<int>("Zr")
                        .HasColumnType("int");

                    b.Property<int>("Zyw")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GrowthStats");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.HairColor", b =>
                {
                    b.Property<int>("HairColorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HairColorId");

                    b.ToTable("HairColor");

                    b.HasData(
                        new
                        {
                            HairColorId = 0,
                            Name = "Ash"
                        },
                        new
                        {
                            HairColorId = 1,
                            Name = "DarkBlonde"
                        },
                        new
                        {
                            HairColorId = 2,
                            Name = "Blonde"
                        },
                        new
                        {
                            HairColorId = 3,
                            Name = "Ginger"
                        },
                        new
                        {
                            HairColorId = 4,
                            Name = "DarkGinger"
                        },
                        new
                        {
                            HairColorId = 5,
                            Name = "LightBrown"
                        },
                        new
                        {
                            HairColorId = 6,
                            Name = "Brown"
                        },
                        new
                        {
                            HairColorId = 7,
                            Name = "DarkBrown"
                        },
                        new
                        {
                            HairColorId = 8,
                            Name = "Black"
                        },
                        new
                        {
                            HairColorId = 9,
                            Name = "Silver"
                        },
                        new
                        {
                            HairColorId = 10,
                            Name = "White"
                        },
                        new
                        {
                            HairColorId = 11,
                            Name = "LightBlonde"
                        },
                        new
                        {
                            HairColorId = 12,
                            Name = "Copper"
                        },
                        new
                        {
                            HairColorId = 13,
                            Name = "Chestnut"
                        },
                        new
                        {
                            HairColorId = 14,
                            Name = "Red"
                        },
                        new
                        {
                            HairColorId = 15,
                            Name = "RavenBlack"
                        });
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.LastClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LastClass");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.MonetaryWealth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CopperPences")
                        .HasColumnType("int");

                    b.Property<int>("GoldCrowns")
                        .HasColumnType("int");

                    b.Property<int>("SilverShilling")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MonetaryWealth");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.PlayerInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CampaignDateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CampaignName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameMasterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlayerInfo");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RaceId");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            RaceId = 0,
                            Name = "Human"
                        },
                        new
                        {
                            RaceId = 1,
                            Name = "Elf"
                        },
                        new
                        {
                            RaceId = 2,
                            Name = "Dwarf"
                        },
                        new
                        {
                            RaceId = 3,
                            Name = "Hafling"
                        });
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 0,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 1,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.RpgSystem", b =>
                {
                    b.Property<int>("RpgSystemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RpgSystemId");

                    b.ToTable("RpgSystem");

                    b.HasData(
                        new
                        {
                            RpgSystemId = 0,
                            Name = "WRFRPG_1ED"
                        },
                        new
                        {
                            RpgSystemId = 1,
                            Name = "WRFRPG_2ED"
                        },
                        new
                        {
                            RpgSystemId = 2,
                            Name = "WRFRPG_4ED"
                        },
                        new
                        {
                            RpgSystemId = 3,
                            Name = "Cthulhu"
                        },
                        new
                        {
                            RpgSystemId = 4,
                            Name = "TalesFromTheLoop"
                        });
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillLevelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillLevelId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.SkillLevel", b =>
                {
                    b.Property<int>("SkillLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillLevelId");

                    b.ToTable("SkillLevel");

                    b.HasData(
                        new
                        {
                            SkillLevelId = 0,
                            Name = "Bought"
                        },
                        new
                        {
                            SkillLevelId = 1,
                            Name = "Plus10"
                        },
                        new
                        {
                            SkillLevelId = 2,
                            Name = "Plus20"
                        });
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.StarSign", b =>
                {
                    b.Property<int>("StarSignId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StarSignId");

                    b.ToTable("StarSign");

                    b.HasData(
                        new
                        {
                            StarSignId = 0,
                            Name = "Drummer"
                        },
                        new
                        {
                            StarSignId = 1,
                            Name = "Bagpipe"
                        },
                        new
                        {
                            StarSignId = 2,
                            Name = "TwoBulls"
                        },
                        new
                        {
                            StarSignId = 3,
                            Name = "FoolMummit"
                        },
                        new
                        {
                            StarSignId = 4,
                            Name = "CharmStar"
                        },
                        new
                        {
                            StarSignId = 5,
                            Name = "EveningtideStar"
                        },
                        new
                        {
                            StarSignId = 6,
                            Name = "RhyiasCauldron"
                        },
                        new
                        {
                            StarSignId = 7,
                            Name = "Lancet"
                        },
                        new
                        {
                            StarSignId = 8,
                            Name = "SageMammit"
                        },
                        new
                        {
                            StarSignId = 9,
                            Name = "GurngisBelt"
                        },
                        new
                        {
                            StarSignId = 10,
                            Name = "CrashedCart"
                        },
                        new
                        {
                            StarSignId = 11,
                            Name = "DragonDragomas"
                        },
                        new
                        {
                            StarSignId = 12,
                            Name = "limnersRope"
                        },
                        new
                        {
                            StarSignId = 13,
                            Name = "Dancer"
                        },
                        new
                        {
                            StarSignId = 14,
                            Name = "FatGoat"
                        },
                        new
                        {
                            StarSignId = 15,
                            Name = "VobisTheEthereal"
                        },
                        new
                        {
                            StarSignId = 16,
                            Name = "GreatCross"
                        },
                        new
                        {
                            StarSignId = 17,
                            Name = "OxGnuthus"
                        },
                        new
                        {
                            StarSignId = 18,
                            Name = "HermitWyzmund"
                        },
                        new
                        {
                            StarSignId = 19,
                            Name = "GoldenCock"
                        });
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int>("ReloadTime")
                        .HasColumnType("int");

                    b.Property<int>("WeaponCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponStrength")
                        .HasColumnType("int");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("WeaponCategoryId");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.WeaponCategory", b =>
                {
                    b.Property<int>("WeaponCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WeaponCategoryId");

                    b.ToTable("WeaponCategory");

                    b.HasData(
                        new
                        {
                            WeaponCategoryId = 0,
                            Name = "Normal"
                        },
                        new
                        {
                            WeaponCategoryId = 1,
                            Name = "TwoHanded"
                        },
                        new
                        {
                            WeaponCategoryId = 2,
                            Name = "Cavalry"
                        },
                        new
                        {
                            WeaponCategoryId = 3,
                            Name = "Kurbash"
                        },
                        new
                        {
                            WeaponCategoryId = 4,
                            Name = "Parrying"
                        },
                        new
                        {
                            WeaponCategoryId = 5,
                            Name = "Immobilizing"
                        },
                        new
                        {
                            WeaponCategoryId = 6,
                            Name = "LongBow"
                        },
                        new
                        {
                            WeaponCategoryId = 7,
                            Name = "FireArm"
                        },
                        new
                        {
                            WeaponCategoryId = 8,
                            Name = "Crossbow"
                        },
                        new
                        {
                            WeaponCategoryId = 9,
                            Name = "Mechanical"
                        },
                        new
                        {
                            WeaponCategoryId = 10,
                            Name = "Throwable"
                        },
                        new
                        {
                            WeaponCategoryId = 11,
                            Name = "Slingshot"
                        });
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.WeaponCharacteristics", b =>
                {
                    b.Property<int>("WeaponCharacteristicsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("WeaponCharacteristicsId");

                    b.HasIndex("WeaponId");

                    b.ToTable("WeaponCharacteristics");

                    b.HasData(
                        new
                        {
                            WeaponCharacteristicsId = 0,
                            Name = "Heavy"
                        },
                        new
                        {
                            WeaponCharacteristicsId = 1,
                            Name = "Devastating"
                        },
                        new
                        {
                            WeaponCharacteristicsId = 2,
                            Name = "Experimental"
                        },
                        new
                        {
                            WeaponCharacteristicsId = 3,
                            Name = "Splinter"
                        },
                        new
                        {
                            WeaponCharacteristicsId = 4,
                            Name = "Deafening"
                        },
                        new
                        {
                            WeaponCharacteristicsId = 5,
                            Name = "Parrying"
                        },
                        new
                        {
                            WeaponCharacteristicsId = 6,
                            Name = "Slow"
                        },
                        new
                        {
                            WeaponCharacteristicsId = 7,
                            Name = "Precise"
                        },
                        new
                        {
                            WeaponCharacteristicsId = 8,
                            Name = "Piercing"
                        },
                        new
                        {
                            WeaponCharacteristicsId = 9,
                            Name = "Special"
                        },
                        new
                        {
                            WeaponCharacteristicsId = 10,
                            Name = "Fast"
                        },
                        new
                        {
                            WeaponCharacteristicsId = 11,
                            Name = "Immobilizing"
                        },
                        new
                        {
                            WeaponCharacteristicsId = 12,
                            Name = "Balanced"
                        },
                        new
                        {
                            WeaponCharacteristicsId = 13,
                            Name = "Unreliable"
                        });
                });

            modelBuilder.Entity("ArmorBodyLocations", b =>
                {
                    b.HasOne("CharacterSheetApi.Entities.Armor", null)
                        .WithMany()
                        .HasForeignKey("ArmorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterSheetApi.Entities.BodyLocations", null)
                        .WithMany()
                        .HasForeignKey("BodyLocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.Armor", b =>
                {
                    b.HasOne("CharacterSheetApi.Entities.ArmorType", "ArmorType")
                        .WithMany()
                        .HasForeignKey("ArmorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmorType");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.CharacterDescription", b =>
                {
                    b.HasOne("CharacterSheetApi.Entities.EyeColor", "EyeColor")
                        .WithMany()
                        .HasForeignKey("EyeColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterSheetApi.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterSheetApi.Entities.HairColor", "HairColor")
                        .WithMany()
                        .HasForeignKey("HairColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterSheetApi.Entities.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterSheetApi.Entities.StarSign", "StarSign")
                        .WithMany()
                        .HasForeignKey("StarSignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EyeColor");

                    b.Navigation("Gender");

                    b.Navigation("HairColor");

                    b.Navigation("Race");

                    b.Navigation("StarSign");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.CharacterInfo", b =>
                {
                    b.HasOne("CharacterSheetApi.Entities.Ability", "Abilities")
                        .WithMany()
                        .HasForeignKey("AbilitiesId");

                    b.HasOne("CharacterSheetApi.Entities.Armor", "Armor")
                        .WithMany()
                        .HasForeignKey("ArmorId");

                    b.HasOne("CharacterSheetApi.Entities.BaseStats", "BaseStats")
                        .WithMany()
                        .HasForeignKey("BaseStatsId");

                    b.HasOne("CharacterSheetApi.Entities.CharacterDescription", "CharacterDescription")
                        .WithMany()
                        .HasForeignKey("CharacterDescriptionId");

                    b.HasOne("CharacterSheetApi.Entities.CurrentClass", "CurrentClass")
                        .WithMany()
                        .HasForeignKey("CurrentClassId");

                    b.HasOne("CharacterSheetApi.Entities.CurrentStats", "CurrentStats")
                        .WithMany()
                        .HasForeignKey("CurrentStatsId");

                    b.HasOne("CharacterSheetApi.Entities.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("CharacterSheetApi.Entities.ExpiriencePoints", "ExpiriencePoints")
                        .WithMany()
                        .HasForeignKey("ExpiriencePointsId");

                    b.HasOne("CharacterSheetApi.Entities.GrowthStats", "GrowthStats")
                        .WithMany()
                        .HasForeignKey("GrowthStatsId");

                    b.HasOne("CharacterSheetApi.Entities.LastClass", "LastClass")
                        .WithMany()
                        .HasForeignKey("LastClassId");

                    b.HasOne("CharacterSheetApi.Entities.MonetaryWealth", "MonetaryWealth")
                        .WithMany()
                        .HasForeignKey("MonetaryWealthId");

                    b.HasOne("CharacterSheetApi.Entities.PlayerInfo", "PlayerInfo")
                        .WithMany()
                        .HasForeignKey("PlayerInfoId");

                    b.HasOne("CharacterSheetApi.Entities.Skill", "Skills")
                        .WithMany()
                        .HasForeignKey("SkillsId");

                    b.HasOne("CharacterSheetApi.Entities.Weapon", "Weapon")
                        .WithMany()
                        .HasForeignKey("WeaponId");

                    b.Navigation("Abilities");

                    b.Navigation("Armor");

                    b.Navigation("BaseStats");

                    b.Navigation("CharacterDescription");

                    b.Navigation("CurrentClass");

                    b.Navigation("CurrentStats");

                    b.Navigation("Equipment");

                    b.Navigation("ExpiriencePoints");

                    b.Navigation("GrowthStats");

                    b.Navigation("LastClass");

                    b.Navigation("MonetaryWealth");

                    b.Navigation("PlayerInfo");

                    b.Navigation("Skills");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.CharacterSheet", b =>
                {
                    b.HasOne("CharacterSheetApi.Entities.CharacterInfo", "CharacterInfo")
                        .WithMany()
                        .HasForeignKey("CharacterInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterSheetApi.Entities.RpgSystem", "RpgSystem")
                        .WithMany()
                        .HasForeignKey("RpgSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterSheetApi.Entities.Users", null)
                        .WithMany("CharacterSheets")
                        .HasForeignKey("UsersId");

                    b.Navigation("CharacterInfo");

                    b.Navigation("RpgSystem");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.Skill", b =>
                {
                    b.HasOne("CharacterSheetApi.Entities.SkillLevel", "SkillLevel")
                        .WithMany()
                        .HasForeignKey("SkillLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillLevel");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.Users", b =>
                {
                    b.HasOne("CharacterSheetApi.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.Weapon", b =>
                {
                    b.HasOne("CharacterSheetApi.Entities.WeaponCategory", "WeaponCategory")
                        .WithMany()
                        .HasForeignKey("WeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeaponCategory");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.WeaponCharacteristics", b =>
                {
                    b.HasOne("CharacterSheetApi.Entities.Weapon", null)
                        .WithMany("WeaponCharacteristics")
                        .HasForeignKey("WeaponId");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.Users", b =>
                {
                    b.Navigation("CharacterSheets");
                });

            modelBuilder.Entity("CharacterSheetApi.Entities.Weapon", b =>
                {
                    b.Navigation("WeaponCharacteristics");
                });
#pragma warning restore 612, 618
        }
    }
}
